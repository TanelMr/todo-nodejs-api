{
  "openapi": "3.0.2",
  "info": {
    "title": "NodeJS API",
    "version": "1.0.0",
    "description": "API that is used to perform CRUD operations for a todolist application in the OpenAPI 3.0 specification.",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Tanel MÃ¤rjama",
      "email": "tanel.marjama@voco.ee"
    }
  },
  "paths": {
    "/tasks": {
      "summary": "Get tasks for authorized and unauthorized users.",
      "description": "Endpoint to get all the tasks for authorized and unauthorized users.",
      "get": {
        "parameters": [
          {
            "name": "UserID",
            "description": "Query parameter for userId.",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/todos"
                  }
                }
              }
            },
            "description": "Got tasks successfully."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            },
            "description": "Unauthorized to get tasks."
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "operationId": "getTasks",
        "summary": "Get tasks.",
        "description": "Gets tasks from the server."
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createNewTodo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res201"
                }
              }
            },
            "description": "New task created."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            },
            "description": "Unauthorized to create a new task."
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "operationId": "newTask",
        "summary": "Create new task.",
        "description": "Sends new task to the server."
      }
    },
    "/logs": {
      "summary": "Get server logs.",
      "description": "Endpoint to get logs from server.",
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logs"
                }
              }
            },
            "description": "Logs received."
          }
        },
        "operationId": "getServerLogs",
        "summary": "Get logs from the server.",
        "description": "Get an array of logs from the server."
      }
    },
    "/tasks/{id}": {
      "summary": "Edit, create or delete a task item.",
      "description": "Endpoint to edit, create or delete the todo items.",
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTodo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res200"
                }
              }
            },
            "description": "Task updated."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            },
            "description": "Unauthorized to edit task."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error404"
                }
              }
            },
            "description": "Task not found."
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "operationId": "updateTodoItem",
        "summary": "Update task.",
        "description": "Send a request to server to update a task."
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res200"
                }
              }
            },
            "description": "Task deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            },
            "description": "Unauthorized to delete task."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error404"
                }
              }
            },
            "description": "Task not found."
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "operationId": "deleteTodoItem",
        "summary": "Delete task item.",
        "description": "Send a request to server to delete a task."
      },
      "parameters": [
        {
          "examples": {
            "Example of a id parameter": {
              "value": "3"
            }
          },
          "name": "id",
          "description": "Parameter for task id ",
          "schema": {
            "type": "integer"
          },
          "in": "path",
          "required": true
        }
      ]
    },
    "/users": {
      "summary": "Create a new user.",
      "description": "Enpoint to create new users.",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res201"
                }
              }
            },
            "description": "New user created."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error409"
                }
              }
            },
            "description": "User already exists."
          }
        },
        "operationId": "createNewUser",
        "summary": "Create new user.",
        "description": "Endpoint to create new user."
      }
    },
    "/sessions": {
      "summary": "Log user in or out of the application.",
      "description": "Endpoint to log user in or out of the application.",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userLoggedInResponse"
                }
              }
            },
            "description": "User logged in."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            },
            "description": "No user found with those credentials."
          }
        },
        "operationId": "authorizeUser",
        "summary": "Log user in.",
        "description": "Endpoint to log a user in."
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/res200"
                }
              }
            },
            "description": "User logged out of the server."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401"
                }
              }
            },
            "description": "Unauthorized to delete session."
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "operationId": "logUserOut",
        "summary": "Log user out of the server.",
        "description": "Endpoint to log user out of the server."
      }
    }
  },
  "components": {
    "schemas": {
      "createNewTodo": {
        "title": "Root Type for createNewTodo",
        "description": "Data to create new task item.",
        "type": "object",
        "properties": {
          "title": {
            "description": "Title value.",
            "type": "string"
          },
          "completed": {
            "description": "Completed value",
            "type": "string"
          }
        },
        "example": {
          "title": "Jaluta koeraga ",
          "completed": "Veel mitte"
        }
      },
      "updateTodo": {
        "title": "Root Type for updateTodo",
        "description": "Data to update the todo list.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "description": "ID of the task to be updated.",
            "type": "integer"
          },
          "title": {
            "description": "Title value.",
            "type": "string"
          },
          "completed": {
            "description": "Completed value.",
            "type": "string"
          }
        },
        "example": {
          "id": 143,
          "title": "Jaluta koeraga ",
          "completed": "Ei ole "
        }
      },
      "todos": {
        "description": "Array containing todo items",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique ID of the task.",
            "type": "integer",
            "example": "15"
          },
          "title": {
            "description": "Title of the task.",
            "type": "string",
            "example": "Jaluta koeraga"
          },
          "completed": {
            "description": "Completion status of the task.",
            "type": "string",
            "example": "Ei ole"
          },
          "createdAt": {
            "description": "Date as string when the task was created.",
            "type": "string",
            "example": "2023-01-16T16:30:15.000Z"
          },
          "updatedAt": {
            "description": "Date as string when the task was updated.",
            "type": "string",
            "example": "2023-01-17T16:30:15.000Z"
          }
        },
        "example": {
          "id": 5,
          "title": "Mine Ãµue",
          "completed": "Ei ole",
          "createdAt": "2023-01-16T16:30:15.000Z",
          "updatedAt": "2023-01-17T16:30:15.000Z"
        }
      },
      "userTodos": {
        "title": "Root Type for userTodos",
        "description": "Data to get user todo list.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "description": "ID of the user.",
            "type": "integer"
          }
        },
        "example": {
          "id": 1
        }
      },
      "logs": {
        "title": "Root Type for logs",
        "description": "JSON object containing server logs.",
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "example": [
          {
            "id": 2,
            "date": "2023-01-24, 14:50",
            "method": "POST",
            "userId": 1,
            "title": "Added \"Tee midagi\"",
            "completed": "Added \"Ei \""
          },
          {
            "id": 3,
            "date": "2023-01-24, 14:50",
            "method": "POST",
            "userId": 1,
            "title": "Added \"Mine Ãµue\"",
            "completed": "Added \"jah\""
          },
          {
            "id": 4,
            "date": "2023-01-24, 14:50",
            "method": "DELETE",
            "userId": 1,
            "title": "Deleted \"Mine Ãµue\"",
            "completed": "Deleted \"jah\""
          }
        ]
      },
      "userLoggedInResponse": {
        "title": "Root Type for userLoggedIn",
        "description": "Data returned from the server if a user is logged in.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "description": "ID of the user.",
            "type": "integer"
          },
          "token": {
            "description": "Token for user authentication",
            "type": "string"
          }
        },
        "example": {
          "id": 1,
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjIsImlhdCI6MTY3NDA0NTA2M30.uNP-MYOO2r0pnPBsblJxkZ0Eu85I532oYQR66wMWE2s"
        }
      },
      "error401": {
        "description": "Errormessage for unauthorized status.",
        "type": "object",
        "example": {
          "error": "Unauthorized"
        }
      },
      "res201": {
        "description": "Response for http 201.",
        "type": "object",
        "example": {
          "success": "Data created"
        }
      },
      "error409": {
        "description": "Errormessage for conflict status.",
        "type": "object",
        "example": {
          "error": "Conflict"
        }
      },
      "userCredentials": {
        "title": "Root Type for login",
        "description": "Data for logging in or creating a new user",
        "type": "object",
        "properties": {
          "username": {
            "description": "Users username.",
            "type": "string"
          },
          "password": {
            "description": "Users password.",
            "type": "string"
          }
        },
        "example": {
          "username": "User1",
          "password": "Password1"
        }
      },
      "error403": {
        "description": "Errormessage for prohibited status.",
        "type": "object",
        "example": {
          "error": "Forbidden"
        }
      },
      "res200": {
        "description": "Response for http 200.",
        "type": "object",
        "example": {
          "success": "Request accepted"
        }
      },
      "error404": {
        "description": "Message for http 404",
        "type": "object",
        "example": {
          "error": "Not found"
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "scheme": "bearer",
        "type": "http",
        "description": "Authorization for API"
      }
    }
  }
}
